<?php
/**
 * Riak Base Model
 * Created by Long Nguyen.
 * Contact: ivoglent@gmail.com
 * Project: phpriak
 * Date: 08/12/2016
 * Time: 09:47
 * Version : 1.0.1
 */

namespace ivoglent\phpriak\base;


use Basho\Riak;
use ivoglent\phpriak\interfaces\RiakModelInterface;
use yii\db\ActiveRecord;

abstract class RiakModel implements RiakModelInterface
{
    /** @var  Riak\Bucket */
    protected $bucket;
    /** @var  string */
    private $key = '';
    /** @var  Riak $riak */
    private $riak;
    public $dns;


    public function __construct() {
        $this->riak = $this->getRiakInstance();
        $this->bucket = new Riak\Bucket($this->getBucketName());
    }

    private function getRiakInstance(){
        if (empty($this->riak)) {
            $nodes = (new Riak\Node\Builder())
                    ->atHost('localhost')
                    ->onPort(8098)
                    ->build();
            $this->riak = new Riak([$nodes]);
        }
        return $this->riak;
    }

    public function getData(){
        $attributes = $this->attributes();
        $data = [];
        foreach ($attributes as $attribute) {
            $data[$attribute] = $this->$attribute;
        }
        return $data;
    }

    /**
     * save
     * @param bool $runValidation
     * @param null $attributeNames
     * @return bool
     */
    public function save($runValidation = TRUE, $attributeNames = NULL, $insert = TRUE) {
        $response = (new \Basho\Riak\Command\Builder\StoreObject($this->riak))
            ->buildBucket($this->getBucketName())
            ->buildJsonObject($this->getData())
            ->build()
            ->execute();
        if ($response->getCode() >= 200 && $response->getCode() < 300) {
            $this->key = $response->getLocation()->getKey();
        }
    }


    public static function findOne($condition) {
        $self = new static();
        $response = (new \Basho\Riak\Command\Builder\FetchObject())
            ->buildLocation('rufus', 'users')
            ->build()
            ->execute();
    }


    /**
     * delete
     * @return false|int
     * @throws \Exception
     */
    public function delete() {
        return parent::delete(); // TODO: Change the autogenerated stub
    }

    /**
     * update
     * @param bool $runValidation
     * @param null $attributeNames
     * @return false|int
     * @throws \Exception
     */
    public function update($runValidation = TRUE, $attributeNames = NULL) {

    }

    /**
     * insert
     * @param bool $runValidation
     * @param null $attributes
     * @return bool
     * @throws \Exception
     */
    public function insert($runValidation = TRUE, $attributes = NULL) {

    }

    public function getKey(){
        return $this->key;
    }

    public function getAttribute($name) {
        $attributes = $this->attributes();
        if (isset($attributes[$name])) {
            return $attributes[$name];
        }
    }

    public function setAttribute($name, $value) {
        die("ok");
    }

    public function getAttributes($names = NULL, $except = []) {
        return $this->attributes();
    }

    public function setAttributes($values, $safeOnly = TRUE) {
        die("OK");
    }

    public function attributes() {
        return [];
    }
}